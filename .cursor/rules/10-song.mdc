---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules: 10 Song Album Game

## Project Overview
- Collaborative playlist game for Farcaster Mini App (`/now-playing` channel).
- Users build themed 10-song playlists, one song per user per playlist (unless idle 24h).
- Frontend: Vite or Next.js (finalize at project start).
- SDK: `@farcaster/miniapp-sdk`.
- Storage: IPFS (preferred) or VPS-hosted JSON/DB.
- Hosting: VPS for backend, Vercel/static for frontend.

## Architecture & File Structure
- Modular, maintainable, and scalable codebase.
- Use the following structure:
  ```
  /components
    /common
    /layout
    /pages
  /hooks
  /lib
    /api
    /utils
  /styles
    globals.css
    components.module.css
  /pages
  /public
  /tests
  ```
- Use TypeScript throughout. Prefer functional components and hooks.

## Coding Standards
- Formatting: Prettier + ESLint (Airbnb style).
- Indentation: 2 spaces, no tabs.
- Naming:
  - Components: PascalCase (e.g., `IdeaCard.tsx`)
  - Functions/vars: camelCase
  - Constants: UPPERCASE_SNAKE_CASE
  - File/dir: lowercase_with_underscores
- File extensions: `.tsx` for React, `.ts` for utils.
- Comments: Detailed, clear, and succinct. Use JSDoc for public APIs.

## Functional Requirements
- **Auth:** Farcaster Quick Auth (SIWF). No OAuth.
- **Game Logic:**
  - 10-track limit per playlist.
  - One song per user per playlist (unless idle 24h).
  - No duplicate songs (check current and previous playlists).
  - Validate song availability (YouTube preferred).
  - Theme set by user who adds 10th track.
  - Export/embed playlist to streaming services.
- **UI/UX:**
  - Mobile-first (424x695px), vertical modal.
  - Splash screen with loading state (`sdk.actions.ready()`).
  - Playlist overview, add song modal, theme setting UI.
  - Tooltips/guides for rules.
  - Youthful, engaging, playful design.
- **Integration:**
  - Use Farcaster Mini App SDK: `ready()`, `signin()`, `composeCast()`, `addMiniApp()`.
  - Prepare for future: `sendToken()`, `swapToken()`, wallet integration.
- **Notifications:**
  - Webhook for playlist completion, new themes.
  - User notification toggles.
- **Performance/Security:**
  - Load <2s. Validate data client/server. Rate limit song submissions. IPFS redundancy, fallback to VPS.
## Workflow & Best Practices
- Immutability and functional programming.
- Use hooks (`useState`, `useEffect`, `useContext`). Avoid class components.
- Modular, reusable code. Avoid duplication.
- Use async for I/O-bound tasks. Minimize blocking operations.
- Use FastAPI/Pydantic for backend (if needed):
  - Functional, declarative routes. Pydantic models for validation.
  - Early returns for errors. Use HTTPException for expected errors.
- Testing: Jest + React Testing Library. Prioritize critical logic/components.
- Use environment variables for secrets/API keys.
- Prepare for Farcaster SDK integration and private VPS deployment.

## Dev Plan (Summary)
- Day 1: Repo, scaffold, SDK, env setup.
- Day 2: Auth/session.
- Day 3: Playlist schema, storage, test read/write.
- Day 4: Game logic, song validation, deduplication.
- Day 5: Theme management UI/logic.
- Day 6: Frontend UI (overview, add song, splash).
- Day 7: Manifest/meta tags for Farcaster.
- Day 8: Webhook/notification integration.
- Day 9: Perf/security, rate limiting.
- Day 10: Deploy, CI/CD, IPFS backup.
- Day 11: E2E testing, QA, feedback.
- Day 12: Docs, roadmap, launch readiness.

## References
- [Farcaster Mini Apps Guide](https://miniapps.farcaster.xyz/docs/getting-started)
- See `techspec.md` and `daily_dev_plan.md` for full details. 
